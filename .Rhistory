remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(stddev,c(1.4, 3.6, 7.9, 8.8))
evaluate(stdev,c(1.4, 3.6, 7.9, 8.8))
evaluate(stddev,c(1.4, 3.6, 7.9, 8.8))
evaluate(standard,c(1.4, 3.6, 7.9, 8.8))
stdandard d
stdandard deviation
evaluate(dev,c(1.4, 3.6, 7.9, 8.8))
evaluatec(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(dev,c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
info()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(mean, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
info()
bye()
q()
library(datasets)
data(iris)
?iris
iris
debug(ls)
ls
debug(ls)
iris
colsmean(iris)
colmeans(iris)
colmean(iris)
s <-split(iris, iris$Species)
10
20
end
q()
y
stop
end
los
ls
20
1000
100000
exit
quit
debug
q
load(iris)
load(datasets)
library(datasets)
data(iris)
?iris
iris
s <- split(iris, iris$Species)
s
sapply(s, function(x) colMeans(x[,"Sepal.Length"])
sapply(s, function(x) colMeans(x[,"Sepal.Length"]))
sapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
s
lapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x[,1]))
dim(s)
means <- s$Virginica
means
means <- s$virginica
means
str(colMeans)
colMeans(means)
means
means <- means$Sepal.Length
means
means <-mean(means)
means
iris
colMeans(iris)
apply(iris[,1:4],2,mean)
rowMeans(iris[,1:4])
data(mtcars)
mtcars
tapply(mtcars$cyl, mtcars$mpg,mean)
lapply(mtcars,mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg,cyl,mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg,mean)
mtcars
with(mtcars, tapply(mpg,cyl,hp))
tapply(mtcars$cyl, mtcars$mpg,mean)
with(mtcars, tapply(mpg,cyl,mean))
with(mtcars, tapply(hp,cyl,mean))
current <- with(mtcars, tapply(mpg, cyl, means))
current <- with(mtcars, tapply(hp, cyl, means))
current <- with(mtcars, tapply(hp, cyl, mean))
current
current$8-current$4
current[1,1]
current[1]
current[,1]
current
dim(current)
current(3)
current[3]-current[1]
debug(ls)
ls
current
ls
debug(ls)
debug
ls
cars
why
debug(ls)
debug(ls)
debug
ls
debug(ls)
debug(ls) ls
ls
q()
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
R.version
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unqiue, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
talbe(flags$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length[x]]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I want to test this function")
submit()
submit()
mad_libs("Columbus", "writing", "yellow")
mad_libs(place = "Columbus", "writing", "yellow")
mad_libs(place = "Columbus", adjective = "writing", noun = "yellow")
submit()
"I" %p% "love" %p% "R!"
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(data)
str(plants)
q()
set.seed(1)
rpois(5,2)
x<-rep(0:1, each=5)
x
e <- norm(10,0,20)
e <- rnorm(10,0,20)
y <- 0.5 + 2*x+e
plot(x,y)
y
load(swirl)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), replacement = TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1), replace = TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(100, size=100, prob = 0.7)
flips2 <- rbinom(100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
help(cars)
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
install.packages("manipulate")
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlabel = "Speed")
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(y = cars$dist, x = cars$speed, xlab = "Speed")
plot(y = cars$dist, x = cars$speed, xlab = "Speed", ylab="Stopping Distance")
plot(y = cars$dist, x = cars$speed, ylab="Stopping Distance")
plot(y = cars$dist, x = cars$speed, xlab = "Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, main="My Plot", sub="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
)
load(mtcars)
library(mtcars)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mpg~cyl, data =mtcars)
hist(mtcars$mpg)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclasst2))
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time()-1
Sys.time()-t1
difftime(Sys.time(),t1, units = "days")
q()
load(swirl)
library(swirl)
swirl()
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
0
quit
q()
install.packages("openintro")
load(swirl)
load("swirl")
swirl()
library(swirl)
q()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
setwd("~/Coursera/Data Science/03 Getting and Cleaning Data/Project")
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
m <- cbind(1, 1:7)
m
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
m
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
m <- rbind(c(1,2,3), c(4,5,6))
m
m <- rbind(c(1,2,3), m)
m
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
features
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
features
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
test <- c("red", "yellow", "blue", "blue2")
test
test[test=="blue"]
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
iris
head(iris)
ddply(iris, .(Species), numcolwise(mean))
installpackages("ddply")
install.packages("ddply")
install.packages("dplyr")
iris
split(iris, species)
split(iris, Species)
iris
split(iris, Species)
names(iris)
split(iris, "Species")
colmeans(split(iris, "Specices"))
colmean(split(iris, "Specices"))
colMeans(split(iris, "Specices"))
mtcars
aggdata <-- aggregate(mtcars, by = list(cyl, vs))
aggdata <- aggregate(mtcars, by = list(cyl, vs)), FUN = mean)
aggdata <- aggregate(mtcars, by = list(cyl, vs)), FUN = mean, na.rm=TRUE)
aggdata <- aggregate(mtcars, by = list(cyl, vs), FUN = mean, na.rm=TRUE)
mtcars
aggdata <- aggregate(mtcars, by = list(cyl, vs), FUN = mean, na.rm=TRUE)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(cyl,vs),
FUN=mean, na.rm=TRUE)
print(aggdata)
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
print(aggdata)
run_analysis()
print(aggdata)
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
library(plyr)
library(plyr)
iris
ddply(iris,.(Species), summarize)
ddply(iris,.(Species), summarize, sum=mean(Sepal.Length))
ddply(iris,.(Species), summarize, mean=mean(Sepal.Length))
ddply(iris,.(Species), summarize, mean(Sepal.Length))
ddply(iris,.(Species), summarize, mean
)
ddply(iris,.(Species Petal.Width), summarize, mean(Sepal.Length))
ddply(iris,.(Species Petal_Width), summarize, mean(Sepal.Length))
ddply(iris,.(Species Petal.Width), summarize, mean(Sepal.Length))
ddply(iris, "Species", numcolwise(sum)))
ddply(iris, "Species", numcolwise(sum))
ddply(iris, "Species, Sepal.Length", numcolwise(sum))
ddply(iris, .(Species), numcolwise(sum))
iris
ddply(iris, .(Species Sepal.Length), numcolwise(sum))
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
ddply(iris, .(Species Sepal.Length), numcolwise(sum))
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
head(iris)
split(iris, Species)
split(iris, iris$Species)
a<- split(iris, iris$Species)
a
ddply(a, .(Sepal.Length), numcolwise(sum))
a
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
a
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
run_analysis()
source('~/Coursera/Data Science/03 Getting and Cleaning Data/Project/run_analysis.R')
